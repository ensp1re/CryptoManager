datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://admin:admin@cluster0.xwdld.mongodb.net/manager?retryWrites=true&w=majority"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]

  otpCode      String?
  otpExpiresAt DateTime?
  resetPasswordToken String?
  resetPasswordExpires DateTime?

  Activity Activity[]
  Comment Comment[]

  Notification Notification[]
}


model Activity {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  project String
  acitivityDescription String
  cost Int?
  deadline DateTime?
  completed Boolean?
  link String?
  dependencies String[]
  timeSpent Int?
  tags String[]
  attachments String[]
  assignedTo String[]
  comments Comment[]
  profit Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  activityId String @db.ObjectId
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  message String
  read Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}